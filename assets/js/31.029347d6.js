(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{229:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop","aria-hidden":"true"}},[t._v("#")]),t._v(" spring-aop")]),t._v(" "),s("h2",{attrs:{id:"疑问？？？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#疑问？？？","aria-hidden":"true"}},[t._v("#")]),t._v(" 疑问？？？")]),t._v(" "),s("ul",[s("li",[t._v("面向过程，面向对象，面向切面编程？")]),t._v(" "),s("li",[t._v("aop的出现要解决什么问题？")]),t._v(" "),s("li",[t._v("aop和aspectj的区别？")]),t._v(" "),s("li",[t._v("静态代理和动态代理的区别？")]),t._v(" "),s("li",[t._v("aop除了方法切面以外，有什么高级特性？")]),t._v(" "),s("li",[t._v("什么是面向切面编程？")]),t._v(" "),s("li",[t._v("aop源码有什么可改造点和设计亮点？")]),t._v(" "),s("li",[t._v("cglib是什么东西？有什么用？")]),t._v(" "),s("li",[t._v("如何记住aop相关知识点？")])]),t._v(" "),s("h2",{attrs:{id:"面向过程，面向对象，面向切面编程？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向过程，面向对象，面向切面编程？","aria-hidden":"true"}},[t._v("#")]),t._v(" 面向过程，面向对象，面向切面编程？")]),t._v(" "),s("blockquote",[s("p",[t._v("软件开发追求的到底是什么？简单，可复用，可扩展？\n面向过程的软件开发：思考的是整个软件有哪些过程。过程都是怎样？\n面向对象的软件开发：思考的是有哪些东西可以抽象成对象。\n面向切面的软件开发：哪些功能可以以切面方式植入。\n面向对象是面向过程的抽象，而面向切面是面向对象的抽象。")])]),t._v(" "),s("h2",{attrs:{id:"aop的出现要解决什么问题？它是怎么实现的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop的出现要解决什么问题？它是怎么实现的？","aria-hidden":"true"}},[t._v("#")]),t._v(" aop的出现要解决什么问题？它是怎么实现的？")]),t._v(" "),s("blockquote",[s("p",[t._v("功能需求之外的服务，比如日志，错误异常处理，监控，事务处理等，aop能将这些服务与业务功能进行减耦。同时能够复用相同服务代码。")])]),t._v(" "),s("h2",{attrs:{id:"静态代理和动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态代理和动态代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态代理和动态代理")]),t._v(" "),s("blockquote",[s("p",[t._v("静态代理中，会为每个被代理的类写一个代理类，在代理类里面再调用被代理类。缺点是复用性差\n动态代理是jdk1.3以后，使用运行时字节码生成技术生成代理类，利用反射将原始类和方法当作参数传递给InvokationHandller 所有被代理的方法统一交给ih的invoke方法处理。")])]),t._v(" "),s("h2",{attrs:{id:"jdk动态代理和cglib动态代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理和cglib动态代理","aria-hidden":"true"}},[t._v("#")]),t._v(" JDK动态代理和CGLIB动态代理")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("JDK： 基于反射机制进行字节码生成，优点：生成代理速度快，缺点：基于接口，非接口不能用JDK动态代理，使用反射，程序执行效率比较低。")]),t._v(" "),s("li",[t._v("CGLIB：采用继承的方式，对生成后的字节码文件进行了优化，程序性能更好。")])])]),t._v(" "),s("h2",{attrs:{id:"aop源码跟踪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop源码跟踪","aria-hidden":"true"}},[t._v("#")]),t._v(" AOP源码跟踪")]),t._v(" "),s("blockquote",[s("p",[t._v("AopNamespaceHandler\nAspectJAutoProxyBeanDefinitionParser")])]),t._v(" "),s("ul",[s("li",[t._v("DefaultAopProxyFactory")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AopProxy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAopProxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AdvisedSupport")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AopConfigException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果配置optimize和target-class，或者要代理的bean没有实现接口的话，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用cglib代理，否则使用JDK动态代理")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isOptimize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isProxyTargetClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNoUserSuppliedProxyInterfaces")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" targetClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTargetClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里主要防止获取不到类对象，比如final标示的对象")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AopConfigException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TargetSource cannot determine target class: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Either an interface or a target is required for proxy creation."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果目标是个接口的化，还是采用JDK动态代理方式")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isProxyClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JdkDynamicAopProxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjenesisCglibAopProxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JdkDynamicAopProxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"springaop介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springaop介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" SpringAOP介绍")]),t._v(" "),s("p",[t._v("@Aspect、@Pointcut、@Before、@After 等注解都是来自于 AspectJ，但是功能的实现是纯 Spring AOP 自己实现的。")]),t._v(" "),s("h2",{attrs:{id:"joinpoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#joinpoint","aria-hidden":"true"}},[t._v("#")]),t._v(" JOINPOINT")]),t._v(" "),s("p",[t._v("指的就是方法调用（构造方法，set，get，正常方法）\nSpringAOP仅支持方法级别的JOINPOINT")]),t._v(" "),s("h2",{attrs:{id:"pointcut"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pointcut","aria-hidden":"true"}},[t._v("#")]),t._v(" POINTCUT")]),t._v(" "),s("p",[t._v("要匹配的joinpint，通过相应的表达式进行匹配")]),t._v(" "),s("h2",{attrs:{id:"advise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advise","aria-hidden":"true"}},[t._v("#")]),t._v(" ADVISE")]),t._v(" "),s("p",[t._v("具体切面代码都在这里，包括before，throw，after，invoke")]),t._v(" "),s("h2",{attrs:{id:"aspect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aspect","aria-hidden":"true"}},[t._v("#")]),t._v(" ASPECT")]),t._v(" "),s("p",[t._v("它代表容器，包含多个pointcut和advise")]),t._v(" "),s("h2",{attrs:{id:"织入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#织入","aria-hidden":"true"}},[t._v("#")]),t._v(" 织入")]),t._v(" "),s("p",[t._v("ProxyFactory")]),t._v(" "),s("p",[t._v("##OOP与AOP\n用oop，想要实现日志记录和监控等功能，首先想到可能是继承，或者组合，比如售后部分系统业务类继承DebugService，JMQService等，为了进行日志记录，但是这样违背了oop的设计理念。于是aop诞生了。。。\naop最初采用静态代理方式，为每个符合pointcut的类生成相应的代理类。但是这样会导致，joinpoint相同，目标对象类型不一样，会建立很多的代理对象。于是动态代理诞生了。。。\n动态代理分为 JDK提供的动态代理和cglib动态代理，二者互补，jdk只能代理实现接口的类，cglib只能代理非final类型的类，spring默认采用jdk动态代理（大概是jdk性能更好一些）")]),t._v(" "),s("p",[t._v("spring aop  开发完joinpoint  开发完advise  配置pointcut， 动态代理生成代理类， 在运行时期：")])])}),[],!1,null,null,null);a.default=e.exports}}]);